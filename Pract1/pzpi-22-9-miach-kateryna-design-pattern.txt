МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ










ЗВІТ
з практичної роботи
з дисципліни  «Архітектура програмного забезпечення»
на тему : «Шаблон проєктування програмного забезпечення: Prototype»








Виконала:					        	Перевірив:

ст. гр. ПЗПІ-22-9                                        	Сокорчук Ігор Петрович
М`яч Катерина Олександрівна                 












Харків 2025
1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	23.03.2025	0.1	Створено розділи: «Завдання», «Опис виконаної роботи», «Висновки»; Додаток А, Додаток Б, Додаток В та зроблено презентацію і відеозапис.
			

2 ЗАВДАННЯ

1.	Дослідити поняття шаблонів (патернів) проєктування загалом.
2.	Проаналізувати концепцію, структуру і поведінку Prototype.
3.	Виявити сильні й слабкі сторони цього патерна.
4.	Навести приклади його використання в практиці.
5.	Реалізувати приклад використання патерна на JavaScript.
6.	Підготувати презентацію доповіді.

3 ОПИС ВИКОНАНОЇ РОБОТИ

Шаблони проєктування – це повторювані рішення типових проблем, що виникають у процесі розробки програмного забезпечення. Prototype – це породжувальний патерн проектування, що дає змогу копіювати об’єкти, не вдаючись у подробиці їхньої реалізації. Замість створення нового екземпляра через конструктор, програма створює клон існуючого об’єкта, завдяки чому можна створювати нові об’єкти швидко та з гнучкою структурою.

Прототип доцільно застосовувати в тих випадках, коли створення нового об’єкта є дорогим або складним через велику кількість параметрів або взаємозв’язків. Також цей шаблон ефективний у ситуаціях, коли потрібне універсальне копіювання об’єктів незалежно від їхнього конкретного класу, особливо якщо типи об’єктів визначаються під час виконання програми. Рішення, запропоноване патерном, полягає в реалізації інтерфейсу Prototype, який містить метод clone(), що повертає повну копію об’єкта. Клієнтський код не створює об’єкти напряму, а використовує цей метод для отримання нового екземпляра.
У структурі патерна Prototype беруть участь три основні компоненти. Першим із них є інтерфейс Prototype, який визначає метод клонування, зазвичай позначений як clone(). Цей інтерфейс є абстрактним описом поведінки, яку мають реалізувати всі класи-прототипи, тобто він встановлює єдині правила для копіювання об’єктів. Другим компонентом є ConcretePrototype – це конкретний клас, який реалізує інтерфейс Prototype та містить логіку створення копій об’єкта. Він визначає, що саме означає "копія" для певного типу об’єкта, і як вона створюється. Третім учасником є Client – клієнтський код, який ініціює процес копіювання. Він взаємодіє з об’єктом через інтерфейс Prototype і використовує метод clone() для створення нових екземплярів, не знаючи при цьому точного типу об’єкта.
Патерн Prototype широко застосовується як у повсякденному житті, так і в програмному забезпеченні. У звичайних життєвих ситуаціях приклади його реалізації можна побачити під час копіювання документів у Google Docs або Microsoft Word. Коли користувач створює копію документа-шаблону, він створює новий об’єкт на основі існуючого, зберігаючи при цьому структуру, стиль і зміст оригіналу.
Ще одним прикладом є виробництво, де виготовлення нових виробів часто базується на створенні копій за допомогою матриці або зразка. Подібний підхід дозволяє прискорити процес виготовлення і забезпечити однаковість продукції. У мобільних застосунках патерн Prototype реалізується при створенні повторюваних інтерфейсних елементів, таких як кнопки, блоки, які часто копіюються з наявних шаблонів для збереження стилю та зручності користувача.
Підтвердженням теоретичних знань щодо патерна Prototype стала реалізація його прикладу за допомогою мови програмування JavaScript. Було створено клас, який імітує роботу з документами. Клас містить два основних поля – заголовок та вміст документа, а також метод clone(), який відповідає за створення точної копії поточного об’єкта. Метод clone() повертає новий екземпляр класу з такими самими значеннями властивостей, що й в оригінальному об’єкті. Таким чином, замість повторного використання конструктора для створення подібного об’єкта, є можливість швидко та зручно отримати копію наявного. Це дозволяє економити ресурси та уникати дублювання коду при створенні однотипних об’єктів із подібним вмістом. Результатом виконання такого коду є два незалежні об’єкти з однаковими значеннями властивостей. Повний приклад реалізації наведено в Додатку B.
Також існують два основні типи копіювання – поверхневе та глибоке. Поверхневе копіювання (shallow copy) передбачає, що копіюються лише властивості верхнього рівня об'єкта. Якщо об'єкт містить вкладені структури або посилання на інші об'єкти, копія не створює нових екземплярів цих об'єктів, а лише передає посилання на них. У результаті зміни у вкладених об'єктах можуть впливати як на оригінал, так і на копію, що часто є небажаним. Для прикладу, якщо створити об’єкт person, що містить вкладений об’єкт address, а потім виконати копіювання через оператор =, то зміни в копії автоматично відіб’ються в оригіналі. Такий підхід демонструється у Додатку В. Глибоке копіювання (deep copy), навпаки, передбачає створення повноцінних копій не лише самого об'єкта, а й усіх вкладених у нього елементів. Кожен під об’єкт дублюється рекурсивно, що забезпечує повну незалежність копії від оригіналу. Один зі способів реалізації глибокого копіювання у JavaScript – це використання JSON.parse(JSON.stringify(obj)), як показано у Додатку В.
Переваги патерна Prototype полягають у можливості створювати нові об’єкти без використання ключового слова new, що дозволяє зменшити залежність від конкретних класів. Такий підхід сприяє кращій підтримці й масштабуванню коду, а також дає змогу зберігати готові об’єкти-прототипи для подальшого використання як шаблони. Крім того, створення об’єктів шляхом копіювання часто є швидшим за повторне ініціалізування з нуля, що позитивно позначається на продуктивності застосунку. Патерн також демонструє високу придатність до побудови об’єктів у ран таймі, коли типи або параметри об’єктів невідомі заздалегідь. Разом із тим, використання патерна має певні обмеження. Одним із недоліків є необхідність реалізовувати метод clone() у кожному класі, який бере участь у копіюванні. У складних системах із великою кількістю об'єктів це може призвести до дублювання коду та збільшення витрат на підтримку. Також можуть виникати помилки при копіюванні структур із глибокою вкладеністю або великою кількістю зв’язків, якщо не реалізовано повноцінне глибоке копіювання. Також під час клонування об’єктів не завжди очевидно, що саме копіюється, що підвищує ризик ненавмисної зміни або втрати важливих даних. 

4 ВИСНОВКИ

У ході практичної роботи було отримано повне уявлення про породжувальний шаблон проєктування Prototype, який дозволяє створювати нові об’єкти шляхом копіювання вже існуючих. Такий підхід демонструє високу ефективність у випадках, коли об’єкти мають складну структуру або потребують багато ресурсів для ініціалізації. Патерн забезпечує зменшення залежності від конкретних класів, підвищує гнучкість коду, а також дозволяє створювати об’єкти динамічно, без прямого використання конструктора. Це особливо важливо у проєктах, де структура або типи об’єктів можуть змінюватися під час виконання. Вивчення різниці між поверхневим і глибоким копіюванням дозволило краще зрозуміти ризики, пов’язані з копіюванням об’єктів, а також переваги використання методу clone() в умовах реальних проєктів. Застосування Prototype вимагає уважності та грамотної реалізації в аспекті глибокого копіювання та обробки залежностей. При неправильному підході можливе виникнення логічних помилок, пов’язаних з неповним або некоректним копіюванням внутрішніх даних. Загалом патерн Prototype є універсальним і практичним інструментом, який дозволяє спростити процес створення об’єктів, забезпечити їх повторне використання, покращити архітектуру застосунку та оптимізувати роботу з ресурсами. 















ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді
 
Відеозапис доповіді на YouTube:  https://youtu.be/-F3Ih67H3zA

00:00 Що таке патерн Prototype? Пояснюється, що таке патерн Prototype, до якої групи він належить і в чому його суть. Основна ідея полягає у створенні нових об’єктів шляхом клонування вже існуючих, без прямого використання конструктора.
00:45 Актуальність і призначення патерна. Розкриваються ситуації, в яких доцільне використання патерна: складні об’єкти, динамічні системи, невідомі класи під час виконання. Також описується, як реалізується копіювання через метод clone().
02:41 Структура патерна Prototype. Описуються основні компоненти патерна: інтерфейс Prototype з методом clone(), конкретний клас ConcretePrototype, який реалізує логіку копіювання, та Client – код, що ініціює клонування.
03:52 Приклади використання в реальному житті. Копіювання документів, створення інтерфейсів у мобільних додатках, фабричне штампування однакових елементів тощо.
04:59 Приклад реалізації на JavaScript. Демонструється приклад коду на JavaScript, де клас Document має метод clone() для створення копії. Пояснюється, як працює клонування та чому це зручно і ефективно у практиці.
06:05 Типи копіювання: поверхневе та глибоке. Пояснюється різниця між поверхневим (shallow) і глибоким (deep) копіюванням. Наводиться, чому глибоке копіювання є важливим при роботі зі складними структурами.
07:02 Переваги патерна Prototype. Розглядаються основні переваги використання патерна: економія ресурсів, зменшення залежності від класів, зручність роботи з шаблонами, підтримка ран тайм-об’єктів, гнучкість архітектури.
09:01 Недоліки патерна Prototype. Описуються недоліки патерна Prototype, такі як складність реалізації глибокого копіювання, ризики втрат даних, дублювання логіки у методах clone().
09:45 Висновки. Підкреслюється доцільність застосування патерна у відповідних ситуаціях.





















ДОДАТОК Б
Слайди презентації доповіді

 
Рисунок Б.1 – Титульний слайд  
 
Рисунок Б.2 – Вступ до патерна Prototype
 
Рисунок Б.3 – Використання Prototype
 
Рисунок Б.4 – Структура патерна Prototype




 
Рисунок Б.5 – Застосування патерна в житті
 
Рисунок Б.6 – Кодова реалізація патерна Prototype

 
Рисунок Б.7 – Типи копіювання: поверхневе та глибоке

Рисунок Б.8 – Переваги патерна Prototype
 
Рисунок Б.9 – Недоліки патерна
 
Рисунок Б.10 – Висновки



ДОДАТОК В
Приклади програмного коду

1 class Document {
2   constructor(title, content) {
3     this.title = title;
4     this.content = content;
5   }
6 
7   clone() {
8     return new Document(this.title, this.content);
9   }
10 }
11 
12 const original = new Document("Template", "Hello world!");
13 const copy = original.clone();
14 
15 console.log(copy.title);   // Template
16 console.log(copy.content); // Hello world!


1 const person = {
2   name: "Alice",
3   address: { city: "Kyiv" }
4 };
5 
6 const copy = person; // поверхнева копія
7 copy.address.city = "Lviv";
8 
9 console.log(person.address.city); // Lviv


1 const person = {
2   name: "Alice",
3   address: { city: "Kyiv" }
4 };
5 
6 const deepCopy = JSON.parse(JSON.stringify(person));
7 deepCopy.address.city = "Lviv";
8 
9 console.log(person.address.city); // Kyiv
